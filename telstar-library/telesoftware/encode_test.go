package telesoftware

import (
	"encoding/hex"
	"fmt"
	"github.com/johnnewcombe/telstar-library/text"
	"testing"
)

const (
	TEST_ERROR_MESSAGE  = "Test Description: \"%s.\""
	MAX_CHARS_PER_BLOCK = 859 - 12 // allow for BLOCK_END (2), checksum (3) and the start sequence (7)

)

func Test_Encode(t *testing.T) {

	type Test struct {
		description string
		input       []byte
		want        []byte
	}

	var tests = []Test{
		{"Hello World", []byte{0xd, 0x0, 0x5, 0x6, 0x20, 0xdb, 0xd, 0x0, 0xa, 0x1f, 0x20, 0xf4, 0x20, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0xd, 0x0, 0x14, 0x21, 0x20, 0xf1, 0x20, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0xd, 0x0, 0x1e, 0x6, 0x20, 0xf1, 0xd, 0x0, 0x28, 0x2c, 0x20, 0xf1, 0x20, 0x22, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x42, 0x42, 0x43, 0x20, 0x42, 0x41, 0x53, 0x49, 0x43, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0xd, 0x0, 0x32, 0x2f, 0x20, 0xf1, 0x20, 0x22, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x22, 0xd, 0x0, 0x3c, 0x2d, 0x20, 0xf1, 0x20, 0x22, 0x20, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x20, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0xd, 0x0, 0x46, 0x6, 0x20, 0xf1, 0xd, 0xff},
			[]byte{0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x45, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x34, 0x5b, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x4a, 0x5f, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x54, 0x7c, 0x30, 0x7d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x54, 0x7c, 0x30, 0x21, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x5e, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x28, 0x2c, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x54, 0x68, 0x69, 0x73, 0x7d, 0x69, 0x73, 0x7d, 0x61, 0x7d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x7d, 0x42, 0x42, 0x43, 0x7d, 0x42, 0x41, 0x53, 0x49, 0x43, 0x7d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x32, 0x2f, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x7d, 0x69, 0x6e, 0x7d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x7d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x66, 0x6f, 0x72, 0x7d, 0x75, 0x73, 0x65, 0x7d, 0x69, 0x6e, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x3c, 0x2d, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x74, 0x68, 0x65, 0x7d, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x7d, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x7d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x46, 0x7c, 0x31, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x5f, 0x7c, 0x46}},
		{"CR", []byte{0x0d}, []byte{0x7c, 0x4c, 0x7c, 0x46}},
		{"CR2", []byte{0x0d, 0x0d}, []byte{0x7c, 0x4c, 0x7c, 0x4c, 0x7c, 0x46}},
		{"ESC", []byte{0x7c, 0x7c}, []byte{0x7c, 0x45, 0x7c, 0x45, 0x7c, 0x46}},
		{"0x7D", []byte{0x7d, 0x7d}, []byte{0x7c, 0x7d, 0x7c, 0x7d, 0x7c, 0x46}},
		{"Control Seq 1", []byte{0x1F, 0x1F, 0x7e}, []byte{0x7c, 0x31, 0x5f, 0x5f, 0x7c, 0x30, 0x7e, 0x7c, 0x46}},
		{"Control Seq 0", []byte{0x1F, 0x1F, 0x7f}, []byte{0x7c, 0x31, 0x5f, 0x5f, 0x7c, 0x30, 0x7f, 0x7c, 0x46}},
		{"Control Seq 2", []byte{0x9f, 0x9f, 0x7e}, []byte{0x7c, 0x32, 0x5f, 0x5f, 0x7c, 0x30, 0x7e, 0x7c, 0x46}},
		{"Control Seq 3", []byte{0xbf, 0xbf, 0x7e}, []byte{0x7c, 0x33, 0x5f, 0x5f, 0x7c, 0x30, 0x7e, 0x7c, 0x46}},
		{"Control Seq 4", []byte{0xdf, 0xdf, 0x7e}, []byte{0x7c, 0x34, 0x5f, 0x5f, 0x7c, 0x30, 0x7e, 0x7c, 0x46}},
		{"Control Seq 5", []byte{0xff, 0xff, 0x7e}, []byte{0x7c, 0x35, 0x5f, 0x5f, 0x7c, 0x30, 0x7e, 0x7c, 0x46}},
	}

	for _, test := range tests {
		// load the same blob and compare to the original
		if got, err := Encode(test.input); err != nil || !text.AreEqualByteSlices(got, test.want) {
			fmt.Printf("'got' followed by 'want'\n")

			fmt.Println(hex.Dump(got))
			fmt.Println(hex.Dump(test.want))
			t.Errorf(TEST_ERROR_MESSAGE, test.description)
		}
	}

}

func Test_enblock(t *testing.T) {

	var (
		got []Block
		err error
	)
	type Test struct {
		description           string
		inputName             string
		inputPageNumber       int
		inputFrameId          rune
		inputMaxCharsPerBlock int
		inputData             []byte
		wantData              []Block
	}
	var tests = []Test{

		{"Page 99 (maxchars per block = 847", "TEST", 99, 'c', MAX_CHARS_PER_BLOCK,
			[]byte{0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x45, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x34, 0x5b, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x4a, 0x5f, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x54, 0x7c, 0x30, 0x7d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x54, 0x7c, 0x30, 0x21, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x5e, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x28, 0x2c, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x54, 0x68, 0x69, 0x73, 0x7d, 0x69, 0x73, 0x7d, 0x61, 0x7d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x7d, 0x42, 0x42, 0x43, 0x7d, 0x42, 0x41, 0x53, 0x49, 0x43, 0x7d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x32, 0x2f, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x7d, 0x69, 0x6e, 0x7d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x7d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x66, 0x6f, 0x72, 0x7d, 0x75, 0x73, 0x65, 0x7d, 0x69, 0x6e, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x3c, 0x2d, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x74, 0x68, 0x65, 0x7d, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x7d, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x7d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x46, 0x7c, 0x31, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x5f, 0x7c, 0x46}, []Block{
				Block{[]byte{0x7c, 0x41, 0x7c, 0x47, 0x63, 0x7c, 0x49, 0x54, 0x45, 0x53, 0x54, 0x7c, 0x4c, 0x30, 0x30, 0x31, 0x7c, 0x5a, 0x31, 0x32, 0x32}, 99, 'c'},
				Block{[]byte{0x7c, 0x41, 0x7c, 0x47, 0x64, 0x7c, 0x49, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x45, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x34, 0x5b, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x4a, 0x5f, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x54, 0x7c, 0x30, 0x7d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x54, 0x7c, 0x30, 0x21, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x5e, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x28, 0x2c, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x54, 0x68, 0x69, 0x73, 0x7d, 0x69, 0x73, 0x7d, 0x61, 0x7d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x7d, 0x42, 0x42, 0x43, 0x7d, 0x42, 0x41, 0x53, 0x49, 0x43, 0x7d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x32, 0x2f, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x7d, 0x69, 0x6e, 0x7d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x7d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x66, 0x6f, 0x72, 0x7d, 0x75, 0x73, 0x65, 0x7d, 0x69, 0x6e, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x3c, 0x2d, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x74, 0x68, 0x65, 0x7d, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x7d, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x7d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x46, 0x7c, 0x31, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x5f, 0x7c, 0x46, 0x7c, 0x5a, 0x30, 0x31, 0x35}, 99, 'd'},
			}},
		{"Page 99 (maxchars per block = 200", "TEST", 99, 'c', 200,
			[]byte{0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x45, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x34, 0x5b, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x4a, 0x5f, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x54, 0x7c, 0x30, 0x7d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x54, 0x7c, 0x30, 0x21, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x5e, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x28, 0x2c, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x54, 0x68, 0x69, 0x73, 0x7d, 0x69, 0x73, 0x7d, 0x61, 0x7d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x7d, 0x42, 0x42, 0x43, 0x7d, 0x42, 0x41, 0x53, 0x49, 0x43, 0x7d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x32, 0x2f, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x7d, 0x69, 0x6e, 0x7d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x7d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x66, 0x6f, 0x72, 0x7d, 0x75, 0x73, 0x65, 0x7d, 0x69, 0x6e, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x3c, 0x2d, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x74, 0x68, 0x65, 0x7d, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x7d, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x7d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x46, 0x7c, 0x31, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x5f, 0x7c, 0x46}, []Block{
				Block{[]byte{0x7c, 0x41, 0x7c, 0x47, 0x63, 0x7c, 0x49, 0x54, 0x45, 0x53, 0x54, 0x7c, 0x4c, 0x30, 0x30, 0x32, 0x7c, 0x5a, 0x31, 0x32, 0x31}, 99, 'c'},
				Block{[]byte{0x7c, 0x41, 0x7c, 0x47, 0x64, 0x7c, 0x49, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x45, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x34, 0x5b, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x4a, 0x5f, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x54, 0x7c, 0x30, 0x7d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x54, 0x7c, 0x30, 0x21, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x5e, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x28, 0x2c, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x54, 0x68, 0x69, 0x73, 0x7d, 0x69, 0x73, 0x7d, 0x61, 0x7d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x7d, 0x42, 0x42, 0x43, 0x7d, 0x42, 0x41, 0x53, 0x49, 0x43, 0x7d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x32, 0x2f, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x7d, 0x69, 0x6e, 0x7d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x7d, 0x66, 0x7c, 0x5a, 0x31, 0x32, 0x35}, 99, 'd'},
				Block{[]byte{0x7c, 0x41, 0x7c, 0x47, 0x65, 0x7c, 0x49, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x66, 0x6f, 0x72, 0x7d, 0x75, 0x73, 0x65, 0x7d, 0x69, 0x6e, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x3c, 0x2d, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x74, 0x68, 0x65, 0x7d, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x7d, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x7d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x46, 0x7c, 0x31, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x5f, 0x7c, 0x46, 0x7c, 0x5a, 0x30, 0x32, 0x35}, 99, 'e'},
			}},
		// TODO: Add test with same source with maxChartsPerBlock set to 200
		/*
			BBC Basic Hello World program

			Source Data:
			0xd, 0x0, 0x5, 0x6, 0x20, 0xdb, 0xd, 0x0, 0xa, 0x1f, 0x20, 0xf4, 0x20, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0xd, 0x0, 0x14, 0x21, 0x20, 0xf1, 0x20, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0xd, 0x0, 0x1e, 0x6, 0x20, 0xf1, 0xd, 0x0, 0x28, 0x2c, 0x20, 0xf1, 0x20, 0x22, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x42, 0x42, 0x43, 0x20, 0x42, 0x41, 0x53, 0x49, 0x43, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0xd, 0x0, 0x32, 0x2f, 0x20, 0xf1, 0x20, 0x22, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x22, 0xd, 0x0, 0x3c, 0x2d, 0x20, 0xf1, 0x20, 0x22, 0x20, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x20, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0xd, 0x0, 0x46, 0x6, 0x20, 0xf1, 0xd, 0xff,

			Encoded Data:
			0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x45, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x34, 0x5b, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x4a, 0x5f, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x54, 0x7c, 0x30, 0x7d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x54, 0x7c, 0x30, 0x21, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x5e, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x28, 0x2c, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x54, 0x68, 0x69, 0x73, 0x7d, 0x69, 0x73, 0x7d, 0x61, 0x7d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x7d, 0x42, 0x42, 0x43, 0x7d, 0x42, 0x41, 0x53, 0x49, 0x43, 0x7d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x32, 0x2f, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x7d, 0x69, 0x6e, 0x7d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x7d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x66, 0x6f, 0x72, 0x7d, 0x75, 0x73, 0x65, 0x7d, 0x69, 0x6e, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x3c, 0x2d, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x74, 0x68, 0x65, 0x7d, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x7d, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x7d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x46, 0x7c, 0x31, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x5f, 0x7c, 0x46,

			Block Data (max chars = 847):
			0x7c, 0x41, 0x7c, 0x47, 0x63, 0x7c, 0x49, 0x54, 0x45, 0x53, 0x54, 0x7c, 0x4c, 0x30, 0x30, 0x31, 0x7c, 0x5a, 0x31, 0x32, 0x32,
			0x7c, 0x41, 0x7c, 0x47, 0x64, 0x7c, 0x49, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x45, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x34, 0x5b, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x4a, 0x5f, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x54, 0x7c, 0x30, 0x7d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x54, 0x7c, 0x30, 0x21, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x5e, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x28, 0x2c, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x54, 0x68, 0x69, 0x73, 0x7d, 0x69, 0x73, 0x7d, 0x61, 0x7d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x7d, 0x42, 0x42, 0x43, 0x7d, 0x42, 0x41, 0x53, 0x49, 0x43, 0x7d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x32, 0x2f, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x7d, 0x69, 0x6e, 0x7d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x7d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x66, 0x6f, 0x72, 0x7d, 0x75, 0x73, 0x65, 0x7d, 0x69, 0x6e, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x3c, 0x2d, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x74, 0x68, 0x65, 0x7d, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x7d, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x7d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x46, 0x7c, 0x31, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x5f, 0x7c, 0x46, 0x7c, 0x5a, 0x30, 0x31, 0x35,

			Block Data (max chars = 200):
			0x7c, 0x41, 0x7c, 0x47, 0x63, 0x7c, 0x49, 0x54, 0x45, 0x53, 0x54, 0x7c, 0x4c, 0x30, 0x30, 0x32, 0x7c, 0x5a, 0x31, 0x32, 0x31,
			0x7c, 0x41, 0x7c, 0x47, 0x64, 0x7c, 0x49, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x45, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x34, 0x5b, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x4a, 0x5f, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x54, 0x7c, 0x30, 0x7d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x54, 0x7c, 0x30, 0x21, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x7d, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x7d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x5e, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x28, 0x2c, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x54, 0x68, 0x69, 0x73, 0x7d, 0x69, 0x73, 0x7d, 0x61, 0x7d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x7d, 0x42, 0x42, 0x43, 0x7d, 0x42, 0x41, 0x53, 0x49, 0x43, 0x7d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x32, 0x2f, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x7d, 0x69, 0x6e, 0x7d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x65, 0x64, 0x7d, 0x66, 0x7c, 0x5a, 0x31, 0x32, 0x35,
			0x7c, 0x41, 0x7c, 0x47, 0x65, 0x7c, 0x49, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x66, 0x6f, 0x72, 0x7d, 0x75, 0x73, 0x65, 0x7d, 0x69, 0x6e, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x3c, 0x2d, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x30, 0x7d, 0x22, 0x7d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x74, 0x68, 0x65, 0x7d, 0x54, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x52, 0x7d, 0x56, 0x69, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x7d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x7c, 0x4c, 0x7c, 0x31, 0x40, 0x7c, 0x30, 0x46, 0x7c, 0x31, 0x46, 0x7c, 0x30, 0x7d, 0x7c, 0x35, 0x51, 0x7c, 0x4c, 0x5f, 0x7c, 0x46, 0x7c, 0x5a, 0x30, 0x32, 0x35,


		*/

	}
	for _, test := range tests {
		// load the same blob and compare to the original
		if got, err = Enblock(test.inputData, test.inputPageNumber, test.inputFrameId, test.inputName, test.inputMaxCharsPerBlock); err != nil {
			t.Errorf(TEST_ERROR_MESSAGE, test.description)
		}

		for i := 0; i < len(test.wantData); i++ {

			fmt.Printf("Block %d ('got' followed by 'want')\n", i)
			fmt.Println(hex.Dump(got[i].Data))
			fmt.Println(hex.Dump(test.wantData[i].Data))

			if !text.AreEqualByteSlices(got[i].Data, test.wantData[i].Data) ||
				got[i].PageNumber != test.wantData[i].PageNumber ||
				got[i].FrameId != test.wantData[i].FrameId {
				t.Errorf(TEST_ERROR_MESSAGE, fmt.Sprintf("%s (Block %d)", test.description, i+1))
			}
		}
	}
}

// |A|Gc|I|L002|Zm
func Test_CreateFrames(t *testing.T) {
	t.Error("Test not implemented!")
}
func Test_updateControlSequence(t *testing.T) {
	t.Error("Test not implemented!")
}

func Test_appendEncodedData(t *testing.T) {
	t.Error("Test not implemented!")
}

func Test_calculateChecksum(t *testing.T) {
	type Test struct {
		description string
		input       []byte
		want        byte
	}

	var tests = []Test{
		{"Checksum 1", []byte{0x7c, 0x41, 0x7c, 0x47, 0x63, 0x7c, 0x49, 0x54, 0x45, 0x53, 0x54, 0x7c, 0x4c, 0x30, 0x30, 0x31, 0x7c, 0x5a}, 122},
	}

	for _, test := range tests {
		// load the same blob and compare to the original
		if got, err := calculateChecksum(test.input); err != nil || got != test.want {
			t.Errorf(TEST_ERROR_MESSAGE, test.description)
		}
	}

}
